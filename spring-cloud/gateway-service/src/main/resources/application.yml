server:
  port: 8000

eureka:
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka

spring:
  application:
    name: gateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  cloud:
    gateway:
      default-filters: # 공통 필터
        - name: GlobalFilter
          args:
            # 전달 하고자 하는 파라미터 값
            baseMessage: Spring Cloud Gateway GlobalFilter
            preLogger: true
            postLogger: true
      routes:
        # 더 상세하게 user service routes 설정 하도록 함
#        - id: user-service # User Service 포워드
#          uri: lb://USER-SERVICE # 요청이 조건에 따라 "이동 예정인" 주소
#          predicates:
#            # 해당 URI로 들어오면 포워딩이 됨.
#            # 하지만, UserController 또한!! /user-service 로 설정해서 구현해야 함
#            - Path=/user-service/**
#          filters:
##            - AddRequestHeader=user-request, user-request-header
##            - AddResponseHeader=user-reponse, user-response-header
#            - CustomFilter
#            - name: LoggingFilter # 추가적인 파라미터가 존재 -> name 지정
#              args:
#                baseMessage: Hi, I'm your logging
#                preLogger: true
#                postLogger: true
        # login API
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie # post로 전달된 값은 매번 새롭게 받도록 초기화
            # # 들어오는 경로 값 형태 변환 -> 이렇게 하면 controller @RequestMapping 값을 맞줘주지 않아도 됨
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        # 회원가입 API
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        # Actuator API
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        # 그외 user API
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie # post로 전달된 값은 매번 새롭게 받도록 초기화
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # 들어오는 input 형태 변환
            - AuthorizationHeaderFilter # 필터 처리

        - id: catalog-service # Catalog Service 포워드
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service # Order Service 포워드
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**



token:
  expiration_time: 86400000 # 24H
  secret: UW2F4eDcwlwxhXHwaT8hYs06dvDc6VvNx8S+Txx++LnIpmYg/N2o5vJ6u57jK3pOef6/KVjUMhil2IKcLy7TQg==

management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httpexchanges, busrefresh
  tracing:
    enabled: true # 추적 활성화